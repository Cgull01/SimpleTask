{
  "Simpletask data": [
    {
      "Title": "c#",
      "Notes": "",
      "Elements": [
        {
          "Title": "read all lines txt",
          "Type": "text",
          "Text": "string[] lines = File.ReadAllLines(SettingsFile); // read all lines to string array\n",
          "ClickCount": 0,
          "Color Index": 0
        },
        {
          "Title": "atstumas tarp 2 taškų",
          "Type": "text",
          "Text": "private static double AtstumasTarp2Tsk(int[] X, int[] Y, int i)\n        {\n            return Math.Sqrt(Math.Pow(0 - X[i], 2) + Math.Pow(0 - Y[i], 2));\n        }\n",
          "ClickCount": 1,
          "Color Index": 0
        },
        {
          "Title": "Lietuviškos raidės konsolėje",
          "Type": "text",
          "Text": "Console.OutputEncoding = Encoding.UTF8; // lietuviškos raidės konsolėje\n\n",
          "ClickCount": 0,
          "Color Index": 0
        },
        {
          "Title": "apsukti skaičių",
          "Type": "text",
          "Text": "private static int ApsuktiSk(ref int x)\n        {\n            int reverseNum = 0;\n            while (x > 0)\n            {\n                reverseNum = (reverseNum * 10) + x % 10;\n                x /= 10;\n\n            }\n\n            return reverseNum;\n        }\n",
          "ClickCount": 0,
          "Color Index": 0
        },
        {
          "Title": "random num without duplicates",
          "Type": "text",
          "Text": "generuoti random skaicius be pasikartojanciu:\n\nfor (int i = 0; i < A.Lenght; i++)\n{\n\tbool same = false;\n\tint rndNum = rnd.Next(0,SIZE+1);\n\t\n\tfor(int j = 0; j < i+1; j++)\n\t{\n\t\tif(A[j]==rndNum)\n\t\t{\n\t\t\tsame = true;\n\t\t}\n\t}\n\t\t\n\t\n\twhile(same == true)\n\t{\n\t\tsame = false;\n\t\trndNum = rndNext(0,SIZE+1);\n\t\t\n\t\tfor(int j = 0; j < 1; j++)\n\t\t{\n\t\t\tif(A[j] == rndNum)\n\t\t\t{\n\t\t\t\tsame = true;\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}\n",
          "ClickCount": 0,
          "Color Index": 0
        },
        {
          "Title": "Iraso paieska Tuple list",
          "Type": "text",
          "Text": "Console.WriteLine(\"Įveskite vardą, veislę, amžių:\");\n            string[] D = Console.ReadLine().Split(' ');\n\n            List<Tuple<string, string, string, int, double>> RastiIrasai = new List<Tuple<string, string, string, int, double>>();\n\n\n            for (int i = 0; i < list.Count; i++) // visi irasai\n            {\n                bool atitinka = false;\n                for (int j = 0; j < D.Length; j++) // ivesti duomenys\n                {\n\n                    if (list[i].Item1 == D[j])\n                    {\n                        atitinka = true;\n                    }\n                    else\n                        if (list[i].Item2 == D[j])\n                    {\n                        atitinka = true;\n                    }\n                    else\n                            if (list[i].Item4 == int.Parse(D[j]))\n                    {\n                        atitinka = true;\n\n                    }\n                    else atitinka = false;\n\n\n                    if (!atitinka) break;\n\n\n\n                }\n\n                if (atitinka)\n                    RastiIrasai.Add(list[i]);\n            }\n\n            if (RastiIrasai.Count > 0)\n            {\n                Console.WriteLine(\"Rasti adresatai:\");\n                foreach (var r in RastiIrasai)\n                {\n                    Console.WriteLine(r);\n                }\n            }\n            else\n            {\n                Console.WriteLine(\"Adresatas nerastas\");\n            }\n",
          "ClickCount": 0,
          "Color Index": 0
        },
        {
          "Title": "Eiti per masyvo kaimynus",
          "Type": "image",
          "Text": "472121471113.png",
          "ClickCount": 0,
          "Color Index": 2
        },
        {
          "Title": "Sort example linq",
          "Type": "text",
          "Text": "list.Sort((a, b) => a.Item2.CompareTo(b.Item2));\n",
          "ClickCount": 1,
          "Color Index": 2
        },
        {
          "Title": "list sort by 2 values",
          "Type": "text",
          "Text": " AtrinktiPrietaisai.Sort((a, b) => // rikiuoti pagal dvi reiksmes\n                        {\n                            int result = a.Imtin().CompareTo(b.Imtin());\n                            return result == 0 ? a.Imtim().CompareTo(b.Imtim()) : result;\n                        });\n",
          "ClickCount": 0,
          "Color Index": 0
        },
        {
          "Title": "c# output to txt",
          "Type": "text",
          "Text": "using (StreamWriter file = new StreamWriter(fileName))\n            {\n                file.WriteLine(header);\n                file.WriteLine(line);\n\n                foreach (Game game in allGames)\n                {\n                    file.WriteLine(game);\n                }\n                file.WriteLine(line);\n\n            }\n\n",
          "ClickCount": 1,
          "Color Index": 0
        }
      ]
    },
    {
      "Title": "General",
      "Notes": "add json.NET refference\n\nOW, NuGet Newtonsoft's JSON.NET from within Visual Studio).\n\npin elements,\n change element creation ui\n\n98.2 bought eth and ada in 2022-01-12\n28.2 ada\n70 eth",
      "Elements": [
        {
          "Title": "terraria mods",
          "Type": "text",
          "Text": "Mods: Calamity Mod + Music, \nSmart Doors, \nWeaponsOut, \nBoss Checklist, \nMagic Storage, \nRecipe Browser \n|| Difficulty: Expert, Revengeance and Death Mode\n\n\nCalamity, Magic Storage, Boss Checklist, Recipe Browser, Auto Trash, AlchemistNPCLite\n\n\n",
          "ClickCount": 0,
          "Color Index": 0
        },
        {
          "Title": "D:\\Duomenys\\Vartotojas\\Desktop\\Misc\\movies",
          "Type": "text",
          "Text": "D:\\Duomenys\\Vartotojas\\Desktop\\Misc\\movies",
          "ClickCount": 24,
          "Color Index": 0
        },
        {
          "Title": "cel shading",
          "Type": "image",
          "Text": "0601212143101410.png",
          "ClickCount": 0,
          "Color Index": 6
        },
        {
          "Title": "nord color pallete",
          "Type": "text",
          "Text": "polar night \ndark #2E3440\n#3B4252\n#434C5E\nlight dark #4C566A\n\nAurora\nred #BF616A\norange #D08770\nyellow #EBCB8B\ngreen #A3BE8C\npurple #B48EAD\n\nFrost\n#8FBCBB\n#88C0D0\n#81A1C1\n#5E81AC\n",
          "ClickCount": 3,
          "Color Index": 3
        },
        {
          "Title": "GIT commands",
          "Type": "text",
          "Text": "\ngit add --all\ngit commit -am \"message\"\ngit tag\"step-x\"\ngit push\ngit push --tags\n",
          "ClickCount": 0,
          "Color Index": 7
        },
        {
          "Title": "spotdl spotify music downloader",
          "Type": "link",
          "Text": "https://github.com/spotDL/spotify-downloader\n",
          "ClickCount": 0,
          "Color Index": 1
        },
        {
          "Title": "web scraper extention",
          "Type": "text",
          "Text": "{\"_id\":\"test2\",\"startUrl\":[\"https://www.ketbilietai.lt/testas/klaidos/29/\"],\"selectors\":[{\"delay\":0,\"id\":\"image\",\"multiple\":false,\"parentSelectors\":[\"question number clicker\"],\"selector\":\".image_holder img\",\"type\":\"SelectorImage\"},{\"delay\":0,\"id\":\"question\",\"multiple\":false,\"parentSelectors\":[\"question number clicker\"],\"regex\":\"\",\"selector\":\"p.klausimo_tekstas\",\"type\":\"SelectorText\"},{\"delay\":0,\"id\":\"answers\",\"multiple\":true,\"parentSelectors\":[\"question number clicker\"],\"regex\":\"\",\"selector\":\"input[rel^=\\\"1\\\"] + label span\",\"type\":\"SelectorText\"},{\"delay\":0,\"id\":\"other choices\",\"multiple\":true,\"parentSelectors\":[\"question number clicker\"],\"regex\":\"\",\"selector\":\"input[rel^=\\\"0\\\"] + label span\",\"type\":\"SelectorText\"},{\"delay\":0,\"id\":\"paaiskinimas\",\"multiple\":false,\"parentSelectors\":[\"question number clicker\"],\"regex\":\"\",\"selector\":\"div.explanation_text\",\"type\":\"SelectorText\"},{\"clickElementSelector\":\"a.paginationlink\",\"clickElementUniquenessType\":\"uniqueText\",\"clickType\":\"clickOnce\",\"delay\":500,\"discardInitialElements\":\"do-not-discard\",\"id\":\"question number clicker\",\"multiple\":true,\"parentSelectors\":[\"_root\"],\"selector\":\"body > div.learn_solutions_wrapper\",\"type\":\"SelectorElementClick\"}]}\n",
          "ClickCount": 0,
          "Color Index": 0
        },
        {
          "Title": "doctor REGITRA",
          "Type": "image",
          "Text": "70214214111124.png",
          "ClickCount": 0,
          "Color Index": 2
        }
      ]
    },
    {
      "Title": "c++",
      "Notes": "",
      "Elements": [
        {
          "Title": "šablonas c++",
          "Type": "text",
          "Text": "#include <iostream>\n#include <fstream>\nusing namespace std;\nint main ()\n{\n    ifstream in ();\n    \n    \n    return 0;\n}\n",
          "ClickCount": 11,
          "Color Index": 0
        },
        {
          "Title": "rikiavimas",
          "Type": "text",
          "Text": "void Rikiavimas(double A[], int n)\n{\n    double tarpinis;\n    for(int i = 0; i < n-1; i++)\n       for(int j = 0; j < n-1-i; j++)\n         if(A[j] < A[j+1])\n            {\n                tarpinis = A[j];\n                A[j] = A[j+1];\n                A[j+1] = tarpinis;\n            }\n}\n",
          "ClickCount": 7,
          "Color Index": 0
        },
        {
          "Title": "Indeksas nerikiuotame",
          "Type": "text",
          "Text": "int IndeksasNerikiuotame(int A[], int n, int b)\n{\n  int k = -1;\n  for (int i = 0; i < n; i++)\n    if (A[i] == b) \n      k = i;\n  return k;\n}\n\n\n",
          "ClickCount": 0,
          "Color Index": 0
        },
        {
          "Title": "Iterpti į masyvą",
          "Type": "text",
          "Text": "void Iterpti (int A[], int & n, int k, int c)\n{\n   for (int i = n; i > k; i--)\n     A[i] = A[i-1];\n   A[k] = c; \n   n = n + 1;\n}\n\n\n",
          "ClickCount": 0,
          "Color Index": 0
        },
        {
          "Title": "string contains",
          "Type": "text",
          "Text": "if (s.find(' ') != string::npos)\n",
          "ClickCount": 0,
          "Color Index": 0
        }
      ]
    },
    {
      "Title": "python",
      "Notes": "",
      "Elements": [
        {
          "Title": "file handling",
          "Type": "text",
          "Text": "file = open(\"newfile.txt\", \"w\")\nfile.write(\"This has been written to a file\")\nfile.close()\n\nfile = open(\"newfile.txt\", \"r\")\nprint(file.read())\nfile.close()\n",
          "ClickCount": 1,
          "Color Index": 0
        },
        {
          "Title": "try finally open/close file",
          "Type": "text",
          "Text": "try:\n   f = open(\"filename.txt\")\n   print(f.read())\nfinally:\n   f.close()\n",
          "ClickCount": 0,
          "Color Index": 0
        },
        {
          "Title": "string methods",
          "Type": "text",
          "Text": "print(\", \".join([\"spam\", \"eggs\", \"ham\"]))\n#prints \"spam, eggs, ham\"\n\nprint(\"Hello ME\".replace(\"ME\", \"world\"))\n#prints \"Hello world\"\n\nprint(\"This is a sentence.\".startswith(\"This\"))\n# prints \"True\"\n\nprint(\"This is a sentence.\".endswith(\"sentence.\"))\n# prints \"True\"\n\nprint(\"This is a sentence.\".upper())\n# prints \"THIS IS A SENTENCE.\"\n\nprint(\"AN ALL CAPS SENTENCE\".lower())\n#prints \"an all caps sentence\"\n\nprint(\"spam, eggs, ham\".split(\", \"))\n#prints \"['spam', 'eggs', 'ham']\"\n",
          "ClickCount": 1,
          "Color Index": 0
        }
      ]
    },
    {
      "Title": "java",
      "Notes": "@FXML to pass values from fxml to controller",
      "Elements": [
        {
          "Title": "random example",
          "Type": "text",
          "Text": "Random rnd = new Random();\nint randomInteger = rnd.nextInt(10)+1;\n\n\n",
          "ClickCount": 1,
          "Color Index": 0
        },
        {
          "Title": "string methods",
          "Type": "text",
          "Text": "text1.equals(text2);\ntext1.length();\ntext1.charAt(0);\ntext1.indexOf(\"f\");\ntext1.isEmpty();\ntext1.toUpperCase();\ntext1.trim(); // removes empty space\ntext1.replace('A', 'X');\ntext1.contains(text3);\n\n",
          "ClickCount": 0,
          "Color Index": 0
        },
        {
          "Title": "list example",
          "Type": "text",
          "Text": "ArrayList<String> Fruits = new ArrayList<>(Arrays.asList(\"Banana\", \"Kiwi\", \"Apple\"));\n\n\n",
          "ClickCount": 0,
          "Color Index": 0
        },
        {
          "Title": "printf",
          "Type": "text",
          "Text": " [conversion-character]\nSystem.out.printf(\"%b\",myBoolean);\nSystem.out.printf(\"%c\",myChar);\nSystem.out.printf(\"%s\",myString);\nSystem.out.printf(\"%d\",myInt);\nSystem.out.printf(\"%f\",myDouble);\n\t\t\n[width]\nminimum number of characters to be written as output\nSystem.out.printf(\"Hello %10s\",myString);\n\t\t\n[precision]\nsets number of digits of precision when outputting floating-point values\nSystem.out.printf(\"You have this much money %.1f\",myDouble);\n\t\t\n[flags]\nadds an effect to output based on the flag added to format specifier\n- : left-justify\n+ : output a plus ( + ) or minus ( - ) sign for a numeric value\n0 : numeric values are zero-padded\n, : comma grouping separator if numbers > 1000\n\t\t\nSystem.out.printf(\"You have this much money %,f\",myDouble);\n",
          "ClickCount": 0,
          "Color Index": 0
        },
        {
          "Title": "read from file method example",
          "Type": "text",
          "Text": "private static void ReadFromFile(ArrayList<ArrayList<Double>> N)\n{\n    File inPutFile = new File(\"data.txt\");\n    try\n    {\n        Scanner scanner = new Scanner(inPutFile);\n\n        while(scanner.hasNextLine())\n        {\n            String [] line = scanner.nextLine().split(\" \");\n            ArrayList<Double> row= new ArrayList<>();\n\n            for (String num : line)\n            {\n                row.add(Double.parseDouble(num));\n            }\n\n            N.add(row);\n\n        }\n\n    } catch (FileNotFoundException e)\n    {\n        e.printStackTrace();\n    }\n}\n\n",
          "ClickCount": 1,
          "Color Index": 2
        },
        {
          "Title": "file reading #2",
          "Type": "text",
          "Text": "private static void ReadFromFile()\n{\n    File inPutFile = new File(\"data.txt\");\n    try\n    {\n        Scanner scanner = new Scanner(inPutFile);\n\n        while(scanner.hasNextLine())\n        {\n             String[] row = scanner.nextLine().split(\" \");\n\n\n\n        }\n\n    } catch (FileNotFoundException e)\n    {\n        e.printStackTrace();\n    }\n}\n\n",
          "ClickCount": 0,
          "Color Index": 2
        },
        {
          "Title": "scanner",
          "Type": "text",
          "Text": "Scanner scanner = new Scanner(System.in);\nString test = scanner.nextLine();\n",
          "ClickCount": 0,
          "Color Index": 6
        },
        {
          "Title": "load scenebuilder",
          "Type": "text",
          "Text": "Parent root = FXMLLoader.load(getClass().getClassLoader().getResource(\"sample.fxml\"));\n\n\n",
          "ClickCount": 0,
          "Color Index": 1
        },
        {
          "Title": "link css",
          "Type": "text",
          "Text": "scene.getStylesheets().add(getClass().getResource(\"styles.css\").toExternalForm());\n\n\n",
          "ClickCount": 1,
          "Color Index": 1
        }
      ]
    },
    {
      "Title": "javascript",
      "Notes": "",
      "Elements": [
        {
          "Title": "get set example",
          "Type": "image",
          "Text": "0121378150710.png",
          "ClickCount": 0,
          "Color Index": 6
        },
        {
          "Title": "random int value between min max",
          "Type": "text",
          "Text": "function getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\n",
          "ClickCount": 2,
          "Color Index": 0
        },
        {
          "Title": "read file",
          "Type": "text",
          "Text": "function readImage(file) {\n  // Check if the file is an image.\n  if (file.type && !file.type.startsWith('image/')) {\n    console.log('File is not an image.', file.type, file);\n    return;\n  }\n\n  const reader = new FileReader();\n  reader.addEventListener('load', (event) => {\n    img.src = event.target.result;\n  });\n  reader.readAsDataURL(file);\n}\n",
          "ClickCount": 0,
          "Color Index": 0
        },
        {
          "Title": "link css",
          "Type": "text",
          "Text": "  <link rel=\"stylesheet\" href=\"styles.css\">\n",
          "ClickCount": 1,
          "Color Index": 0
        },
        {
          "Title": "a* pathfinding",
          "Type": "image",
          "Text": "410314146131056.png",
          "ClickCount": 0,
          "Color Index": 6
        },
        {
          "Title": "check if string is number",
          "Type": "text",
          "Text": "isNaN(num)         // returns true if the variable does NOT contain a valid number\n",
          "ClickCount": 0,
          "Color Index": 0
        },
        {
          "Title": "check if number is integer",
          "Type": "text",
          "Text": "if(num%1===0) // true if int\n",
          "ClickCount": 0,
          "Color Index": 0
        },
        {
          "Title": " findOdd",
          "Type": "text",
          "Text": "const findOdd = (xs) => xs.reduce((a, b) => a ^ b);\n",
          "ClickCount": 0,
          "Color Index": 2
        },
        {
          "Title": "add DOM elements with js example",
          "Type": "text",
          "Text": "function renderLeads()\n{\n    let listItems = \"\"\n\n    for (let i = 0; i < myLeads.length; i++) {\n        listItems += \"<li>\" + myLeads[i] + \"</li>\"\n\n        /*const li = document.createElement(\"li\");\n        li.textContent = myLeads[i]\n        ulEl.append(li)*/\n    }\n\n    ulEl.innerHTML = listItems//5;26;40\n}\n\n",
          "ClickCount": 0,
          "Color Index": 0
        },
        {
          "Title": "localstorage",
          "Type": "link",
          "Text": "https://stackoverflow.com/questions/34847231/how-to-save-progress-in-an-html-game\n",
          "ClickCount": 0,
          "Color Index": 2
        }
      ]
    },
    {
      "Title": "html",
      "Notes": "",
      "Elements": [
        {
          "Title": "npx create-react-app <fileName>",
          "Type": "text",
          "Text": "npx create-react-app <fileName>\n",
          "ClickCount": 2,
          "Color Index": 6
        },
        {
          "Title": "screen reader class",
          "Type": "text",
          "Text": ".sr-only {\n  position: absolute;\n  left: -10000px;\n  width: 1px;\n  height: 1px;\n  top: auto;\n  overflow: hidden;\n}\n",
          "ClickCount": 0,
          "Color Index": 0
        },
        {
          "Title": "responsive image",
          "Type": "text",
          "Text": "img {\n  max-width: 100%;\n  height: auto;\n}\n",
          "ClickCount": 0,
          "Color Index": 0
        }
      ]
    },
    {
      "Title": "dart/flutter",
      "Notes": "",
      "Elements": [
        {
          "Title": "random value interval",
          "Type": "text",
          "Text": "Random().nextInt(1000) + 1;\n",
          "ClickCount": 0,
          "Color Index": 0
        },
        {
          "Title": "firebase dependancies",
          "Type": "text",
          "Text": "flutter pub add firebase_core\nflutter pub add firebase_auth\nflutter pub add cloud_firestore\nflutter pub add firebase_analytics\n\n\ncore: server\nauth: authentication register, login ,log out, email confirmations\nfirestore: stores notes in backend\nanalytics: analytics",
          "ClickCount": 0,
          "Color Index": 4
        }
      ]
    }
  ]
}